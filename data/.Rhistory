?pmultinom
?rmultinom
ps = c(.5,.3,.2)
rep(1/length(ps),length(ps))
rmultinom(1,1,ps)
rmultinom(1,1,ps) + c(1,1,1)
rmultinom(1,1,ps) + c(1,1,1) ->a
which(a == max(a))
a
doSPRT = function(ps, thresh = .75) {
cnts = rep(1,length(ps))
while(max(cnts)/sum(cnts) < thresh) {
cnts = cnts + rmultinom(1,1,ps)
}
n = sum(cnts) - 3
maxidx = which(cnts == max(cnts))
return(c(maxidx,n))
}
doSPRT(ps,.75)
?dmultinom
??dirichlet
library(gtools)
source('~/Dropbox/Experiments/BalanceBeams/Analysis/dirichletDraws.R')
head(aggDF)
source('~/Dropbox/Experiments/BalanceBeams/Analysis/dirichletDraws.R')
head(aggDF)
summary(aggDF)
tail(aggDF)
source('~/Dropbox/Experiments/BalanceBeams/Analysis/dirichletDraws.R')
getstats = function() {
smps = rnorm(N,mx,sdx)
return(mean(smps), sd(smps))
}
mx = 5
sdx = 2
N = 10
getstats = function() {
smps = rnorm(N,mx,sdx)
return(mean(smps), sd(smps))
}
getstats()
source('~/.active-rstudio-document', echo=TRUE)
samps()
samps
getstats()
samps = replicate(10000,getstats)
samps
samps = replicate(10000,getstats())
library(gplots)
install.packages('gplots')
library(gplots)
df = data.frame(samps[1,],samps[2,])
hist2d(df)
hist2d(df,nbins=20)
hist2d(df,nbins=100)
hist2d(df,nbins=50)
?cov
cov(samps[1,],samps[2,])
mean(samps[1,])
mean(samps[2,])
sd(samps[1,])
sd(samps[2,])
2/sqrt(10)
paste("P(",expression(theta),")")
?expression
expression(theta)
theta
log(10)
?optimizae
?optimize
opt.fnc = function(x) {
return((x-1)*(x+2))
}
optimize(opt.fnc, c(-10,10))
optimize(opt.fnc,c(0,20))
setwd("~/Coding/Christmas/cbmm-project-christmas/data")
library(plyr)
dat = read.csv('OnlineRGGoodData.csv')
getFromTrial = function(wid, trnm) {
sdat = subset(dat, Worker == wid & Trial == trnm)
if(nrow(sdat)==0) {return(NA)}
sdat = sdat[order(sdat$Time),] # Just to make sure
fg = which(sdat$NormPrediction=='G')
fr = which(sdat$NormPrediction=='R')
if(length(fg)==0 & length(fr)==0) {
return(NA)
} else if(length(fg)==0) {
return('R')
} else if(length(fr)==0) {
return('G')
} else {
if(fg[1] < fr[1]) {
return('G')
} else {
return('R')
}
}
}
wids = unique(dat$Worker)
trnms = unique(dat$Trial)
retdat = data.frame(WID = rep(wids,each=length(trnms)),
Trials = rep(trnms, times=length(wids)))
retdat$First = mapply(getFromTrial,retdat$WID,retdat$Trials)
head(retdat)
write.csv(retdat, 'FullFirst.csv', row.names=F)
library(plyr)
library(ggplot2)
dat = read.csv('FullFirst.csv')
wids = as.character(unique(dat$Worker))
head(dat)
wids = as.character(unique(dat$WID))
nws = length(wids)
w1 = sample(wids, nws/2)
w2 = wids[which(!(wids %in% w1))]
samp1 = ddply(subset(dat, WID %in% w1), 'Trial', summarize,
Green = mean(First =='G'), Red = mean(First=='R'))
samp1 = ddply(subset(dat, WID %in% w1), 'Trials', summarize,
Green = mean(First =='G'), Red = mean(First=='R'))
samp1 = ddply(subset(dat, WID %in% w1), 'Trials', summarize,
Green_1 = mean(First =='G'), Red_1 = mean(First=='R'))
samp2 = ddply(subset(dat, WID %in% w2), 'Trials', summarize,
Green_2 = mean(First =='G'), Red_2 = mean(First=='R'))
spl.half = function() {
nws = length(wids)
w1 = sample(wids, nws/2)
w2 = wids[which(!(wids %in% w1))]
samp1 = ddply(subset(dat, WID %in% w1), 'Trials', summarize,
Green_1 = mean(First =='G'), Red_1 = mean(First=='R'))
samp2 = ddply(subset(dat, WID %in% w2), 'Trials', summarize,
Green_2 = mean(First =='G'), Red_2 = mean(First=='R'))
return(merge(samp1,samp2))
}
a = spl.half()
head(a)
samp1 = ddply(subset(dat, WID %in% w1), 'Trials', summarize,
Green_1 = mean(First =='G',na.rm=T), Red_1 = mean(First=='R',na.rm=T))
samp2 = ddply(subset(dat, WID %in% w2), 'Trials', summarize,
Green_2 = mean(First =='G',na.rm=T), Red_2 = mean(First=='R',na.rm=T))
return(merge(samp1,samp2))
spl.half = function() {
nws = length(wids)
w1 = sample(wids, nws/2)
w2 = wids[which(!(wids %in% w1))]
samp1 = ddply(subset(dat, WID %in% w1), 'Trials', summarize,
Green_1 = mean(First =='G',na.rm=T), Red_1 = mean(First=='R',na.rm=T))
samp2 = ddply(subset(dat, WID %in% w2), 'Trials', summarize,
Green_2 = mean(First =='G',na.rm=T), Red_2 = mean(First=='R',na.rm=T))
return(merge(samp1,samp2))
}
a = spl.half()
head(a)
with(a, cor(Green_1,Green_2))
with(a, cor(Green_1,Green_2))
with(spl.half(), cor(Green_1,Green_2))
sh.cor = function() {return(with(spl.half(), cor(Green_1,Green_2)))}
half.cor = mean(replicate(1000, sh.cor))
replicate(1000, sh.cor)
half.cor = mean(replicate(1000, sh.cor()))
half.cor = mean(replicate(100, sh.cor()))
